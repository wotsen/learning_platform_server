// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_sdk_header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_in_5fsdk_5fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_in_5fsdk_5fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_in_5fsdk_5fheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_in_5fsdk_5fheader_2eproto;
namespace insider {
namespace sdk {
class DataTime;
class DataTimeDefaultTypeInternal;
extern DataTimeDefaultTypeInternal _DataTime_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
}  // namespace sdk
}  // namespace insider
PROTOBUF_NAMESPACE_OPEN
template<> ::insider::sdk::DataTime* Arena::CreateMaybeMessage<::insider::sdk::DataTime>(Arena*);
template<> ::insider::sdk::Header* Arena::CreateMaybeMessage<::insider::sdk::Header>(Arena*);
template<> ::insider::sdk::Host* Arena::CreateMaybeMessage<::insider::sdk::Host>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace insider {
namespace sdk {

enum TransProto : int {
  TRANS_PROTO_INVALID = 0,
  TCP = 1,
  UDP = 2,
  TransProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransProto_IsValid(int value);
constexpr TransProto TransProto_MIN = TRANS_PROTO_INVALID;
constexpr TransProto TransProto_MAX = UDP;
constexpr int TransProto_ARRAYSIZE = TransProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransProto_descriptor();
template<typename T>
inline const std::string& TransProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransProto_descriptor(), enum_t_value);
}
inline bool TransProto_Parse(
    const std::string& name, TransProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransProto>(
    TransProto_descriptor(), name, value);
}
enum IpVersion : int {
  IP_VERSION_INVALID = 0,
  IPV4 = 1,
  IPV6 = 2,
  IpVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IpVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IpVersion_IsValid(int value);
constexpr IpVersion IpVersion_MIN = IP_VERSION_INVALID;
constexpr IpVersion IpVersion_MAX = IPV6;
constexpr int IpVersion_ARRAYSIZE = IpVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpVersion_descriptor();
template<typename T>
inline const std::string& IpVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IpVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IpVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IpVersion_descriptor(), enum_t_value);
}
inline bool IpVersion_Parse(
    const std::string& name, IpVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IpVersion>(
    IpVersion_descriptor(), name, value);
}
enum DataFlow : int {
  DATA_IN = 0,
  DATA_OUT = 1,
  DataFlow_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataFlow_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataFlow_IsValid(int value);
constexpr DataFlow DataFlow_MIN = DATA_IN;
constexpr DataFlow DataFlow_MAX = DATA_OUT;
constexpr int DataFlow_ARRAYSIZE = DataFlow_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataFlow_descriptor();
template<typename T>
inline const std::string& DataFlow_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataFlow>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataFlow_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataFlow_descriptor(), enum_t_value);
}
inline bool DataFlow_Parse(
    const std::string& name, DataFlow* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataFlow>(
    DataFlow_descriptor(), name, value);
}
enum SdkMagic : int {
  SDK_NON_MAGIC = 0,
  SDK_MAGIC = 28036591,
  SdkMagic_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SdkMagic_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SdkMagic_IsValid(int value);
constexpr SdkMagic SdkMagic_MIN = SDK_NON_MAGIC;
constexpr SdkMagic SdkMagic_MAX = SDK_MAGIC;
constexpr int SdkMagic_ARRAYSIZE = SdkMagic_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SdkMagic_descriptor();
template<typename T>
inline const std::string& SdkMagic_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SdkMagic>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SdkMagic_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SdkMagic_descriptor(), enum_t_value);
}
inline bool SdkMagic_Parse(
    const std::string& name, SdkMagic* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SdkMagic>(
    SdkMagic_descriptor(), name, value);
}
enum SdkVersion : int {
  SDK_NON_VERSION = 0,
  SDK_CUR_VERSION = 20191110,
  SdkVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SdkVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SdkVersion_IsValid(int value);
constexpr SdkVersion SdkVersion_MIN = SDK_NON_VERSION;
constexpr SdkVersion SdkVersion_MAX = SDK_CUR_VERSION;
constexpr int SdkVersion_ARRAYSIZE = SdkVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SdkVersion_descriptor();
template<typename T>
inline const std::string& SdkVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SdkVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SdkVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SdkVersion_descriptor(), enum_t_value);
}
inline bool SdkVersion_Parse(
    const std::string& name, SdkVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SdkVersion>(
    SdkVersion_descriptor(), name, value);
}
// ===================================================================

class Host :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.Host) */ {
 public:
  Host();
  virtual ~Host();

  Host(const Host& from);
  Host(Host&& from) noexcept
    : Host() {
    *this = ::std::move(from);
  }

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }
  inline Host& operator=(Host&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Host& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Host* internal_default_instance() {
    return reinterpret_cast<const Host*>(
               &_Host_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Host& a, Host& b) {
    a.Swap(&b);
  }
  inline void Swap(Host* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Host* New() const final {
    return CreateMaybeMessage<Host>(nullptr);
  }

  Host* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Host>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Host& from);
  void MergeFrom(const Host& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Host* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.Host";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fheader_2eproto);
    return ::descriptor_table_in_5fsdk_5fheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kIpVersionFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .insider.sdk.IpVersion ip_version = 1;
  void clear_ip_version();
  ::insider::sdk::IpVersion ip_version() const;
  void set_ip_version(::insider::sdk::IpVersion value);
  private:
  ::insider::sdk::IpVersion _internal_ip_version() const;
  void _internal_set_ip_version(::insider::sdk::IpVersion value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:insider.sdk.Host)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int ip_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fheader_2eproto;
};
// -------------------------------------------------------------------

class DataTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.DataTime) */ {
 public:
  DataTime();
  virtual ~DataTime();

  DataTime(const DataTime& from);
  DataTime(DataTime&& from) noexcept
    : DataTime() {
    *this = ::std::move(from);
  }

  inline DataTime& operator=(const DataTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataTime& operator=(DataTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataTime* internal_default_instance() {
    return reinterpret_cast<const DataTime*>(
               &_DataTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataTime& a, DataTime& b) {
    a.Swap(&b);
  }
  inline void Swap(DataTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataTime* New() const final {
    return CreateMaybeMessage<DataTime>(nullptr);
  }

  DataTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataTime& from);
  void MergeFrom(const DataTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.DataTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fheader_2eproto);
    return ::descriptor_table_in_5fsdk_5fheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInTimeFieldNumber = 1,
    kOutTimeFieldNumber = 2,
  };
  // int64 in_time = 1;
  void clear_in_time();
  ::PROTOBUF_NAMESPACE_ID::int64 in_time() const;
  void set_in_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_in_time() const;
  void _internal_set_in_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 out_time = 2;
  void clear_out_time();
  ::PROTOBUF_NAMESPACE_ID::int64 out_time() const;
  void set_out_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_out_time() const;
  void _internal_set_out_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:insider.sdk.DataTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 in_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 out_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fheader_2eproto;
};
// -------------------------------------------------------------------

class Header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.Header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fheader_2eproto);
    return ::descriptor_table_in_5fsdk_5fheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 4,
    kHostFieldNumber = 6,
    kDestFieldNumber = 7,
    kMsgMagicFieldNumber = 1,
    kVersionFieldNumber = 2,
    kPackIdFieldNumber = 3,
    kDataDirFieldNumber = 5,
    kTransProtoFieldNumber = 8,
  };
  // .insider.sdk.DataTime time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::insider::sdk::DataTime& time() const;
  ::insider::sdk::DataTime* release_time();
  ::insider::sdk::DataTime* mutable_time();
  void set_allocated_time(::insider::sdk::DataTime* time);
  private:
  const ::insider::sdk::DataTime& _internal_time() const;
  ::insider::sdk::DataTime* _internal_mutable_time();
  public:

  // .insider.sdk.Host host = 6;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const ::insider::sdk::Host& host() const;
  ::insider::sdk::Host* release_host();
  ::insider::sdk::Host* mutable_host();
  void set_allocated_host(::insider::sdk::Host* host);
  private:
  const ::insider::sdk::Host& _internal_host() const;
  ::insider::sdk::Host* _internal_mutable_host();
  public:

  // .insider.sdk.Host dest = 7;
  bool has_dest() const;
  private:
  bool _internal_has_dest() const;
  public:
  void clear_dest();
  const ::insider::sdk::Host& dest() const;
  ::insider::sdk::Host* release_dest();
  ::insider::sdk::Host* mutable_dest();
  void set_allocated_dest(::insider::sdk::Host* dest);
  private:
  const ::insider::sdk::Host& _internal_dest() const;
  ::insider::sdk::Host* _internal_mutable_dest();
  public:

  // .insider.sdk.SdkMagic msg_magic = 1;
  void clear_msg_magic();
  ::insider::sdk::SdkMagic msg_magic() const;
  void set_msg_magic(::insider::sdk::SdkMagic value);
  private:
  ::insider::sdk::SdkMagic _internal_msg_magic() const;
  void _internal_set_msg_magic(::insider::sdk::SdkMagic value);
  public:

  // .insider.sdk.SdkVersion version = 2;
  void clear_version();
  ::insider::sdk::SdkVersion version() const;
  void set_version(::insider::sdk::SdkVersion value);
  private:
  ::insider::sdk::SdkVersion _internal_version() const;
  void _internal_set_version(::insider::sdk::SdkVersion value);
  public:

  // int64 pack_id = 3;
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::int64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .insider.sdk.DataFlow data_dir = 5;
  void clear_data_dir();
  ::insider::sdk::DataFlow data_dir() const;
  void set_data_dir(::insider::sdk::DataFlow value);
  private:
  ::insider::sdk::DataFlow _internal_data_dir() const;
  void _internal_set_data_dir(::insider::sdk::DataFlow value);
  public:

  // .insider.sdk.TransProto trans_proto = 8;
  void clear_trans_proto();
  ::insider::sdk::TransProto trans_proto() const;
  void set_trans_proto(::insider::sdk::TransProto value);
  private:
  ::insider::sdk::TransProto _internal_trans_proto() const;
  void _internal_set_trans_proto(::insider::sdk::TransProto value);
  public:

  // @@protoc_insertion_point(class_scope:insider.sdk.Header)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::insider::sdk::DataTime* time_;
  ::insider::sdk::Host* host_;
  ::insider::sdk::Host* dest_;
  int msg_magic_;
  int version_;
  ::PROTOBUF_NAMESPACE_ID::int64 pack_id_;
  int data_dir_;
  int trans_proto_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Host

// .insider.sdk.IpVersion ip_version = 1;
inline void Host::clear_ip_version() {
  ip_version_ = 0;
}
inline ::insider::sdk::IpVersion Host::_internal_ip_version() const {
  return static_cast< ::insider::sdk::IpVersion >(ip_version_);
}
inline ::insider::sdk::IpVersion Host::ip_version() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Host.ip_version)
  return _internal_ip_version();
}
inline void Host::_internal_set_ip_version(::insider::sdk::IpVersion value) {
  
  ip_version_ = value;
}
inline void Host::set_ip_version(::insider::sdk::IpVersion value) {
  _internal_set_ip_version(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Host.ip_version)
}

// int32 port = 2;
inline void Host::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Host::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Host::port() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Host.port)
  return _internal_port();
}
inline void Host::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void Host::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Host.port)
}

// string ip = 3;
inline void Host::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Host::ip() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Host.ip)
  return _internal_ip();
}
inline void Host::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Host.ip)
}
inline std::string* Host::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.Host.ip)
  return _internal_mutable_ip();
}
inline const std::string& Host::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void Host::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Host::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:insider.sdk.Host.ip)
}
inline void Host::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:insider.sdk.Host.ip)
}
inline void Host::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:insider.sdk.Host.ip)
}
inline std::string* Host::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Host::release_ip() {
  // @@protoc_insertion_point(field_release:insider.sdk.Host.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.Host.ip)
}

// -------------------------------------------------------------------

// DataTime

// int64 in_time = 1;
inline void DataTime::clear_in_time() {
  in_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataTime::_internal_in_time() const {
  return in_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataTime::in_time() const {
  // @@protoc_insertion_point(field_get:insider.sdk.DataTime.in_time)
  return _internal_in_time();
}
inline void DataTime::_internal_set_in_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  in_time_ = value;
}
inline void DataTime::set_in_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_in_time(value);
  // @@protoc_insertion_point(field_set:insider.sdk.DataTime.in_time)
}

// int64 out_time = 2;
inline void DataTime::clear_out_time() {
  out_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataTime::_internal_out_time() const {
  return out_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataTime::out_time() const {
  // @@protoc_insertion_point(field_get:insider.sdk.DataTime.out_time)
  return _internal_out_time();
}
inline void DataTime::_internal_set_out_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  out_time_ = value;
}
inline void DataTime::set_out_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_out_time(value);
  // @@protoc_insertion_point(field_set:insider.sdk.DataTime.out_time)
}

// -------------------------------------------------------------------

// Header

// .insider.sdk.SdkMagic msg_magic = 1;
inline void Header::clear_msg_magic() {
  msg_magic_ = 0;
}
inline ::insider::sdk::SdkMagic Header::_internal_msg_magic() const {
  return static_cast< ::insider::sdk::SdkMagic >(msg_magic_);
}
inline ::insider::sdk::SdkMagic Header::msg_magic() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Header.msg_magic)
  return _internal_msg_magic();
}
inline void Header::_internal_set_msg_magic(::insider::sdk::SdkMagic value) {
  
  msg_magic_ = value;
}
inline void Header::set_msg_magic(::insider::sdk::SdkMagic value) {
  _internal_set_msg_magic(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Header.msg_magic)
}

// .insider.sdk.SdkVersion version = 2;
inline void Header::clear_version() {
  version_ = 0;
}
inline ::insider::sdk::SdkVersion Header::_internal_version() const {
  return static_cast< ::insider::sdk::SdkVersion >(version_);
}
inline ::insider::sdk::SdkVersion Header::version() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Header.version)
  return _internal_version();
}
inline void Header::_internal_set_version(::insider::sdk::SdkVersion value) {
  
  version_ = value;
}
inline void Header::set_version(::insider::sdk::SdkVersion value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Header.version)
}

// int64 pack_id = 3;
inline void Header::clear_pack_id() {
  pack_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Header::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Header::pack_id() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Header.pack_id)
  return _internal_pack_id();
}
inline void Header::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pack_id_ = value;
}
inline void Header::set_pack_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Header.pack_id)
}

// .insider.sdk.DataTime time = 4;
inline bool Header::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Header::has_time() const {
  return _internal_has_time();
}
inline void Header::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
inline const ::insider::sdk::DataTime& Header::_internal_time() const {
  const ::insider::sdk::DataTime* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::insider::sdk::DataTime*>(
      &::insider::sdk::_DataTime_default_instance_);
}
inline const ::insider::sdk::DataTime& Header::time() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Header.time)
  return _internal_time();
}
inline ::insider::sdk::DataTime* Header::release_time() {
  // @@protoc_insertion_point(field_release:insider.sdk.Header.time)
  
  ::insider::sdk::DataTime* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::insider::sdk::DataTime* Header::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::insider::sdk::DataTime>(GetArenaNoVirtual());
    time_ = p;
  }
  return time_;
}
inline ::insider::sdk::DataTime* Header::mutable_time() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.Header.time)
  return _internal_mutable_time();
}
inline void Header::set_allocated_time(::insider::sdk::DataTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.Header.time)
}

// .insider.sdk.DataFlow data_dir = 5;
inline void Header::clear_data_dir() {
  data_dir_ = 0;
}
inline ::insider::sdk::DataFlow Header::_internal_data_dir() const {
  return static_cast< ::insider::sdk::DataFlow >(data_dir_);
}
inline ::insider::sdk::DataFlow Header::data_dir() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Header.data_dir)
  return _internal_data_dir();
}
inline void Header::_internal_set_data_dir(::insider::sdk::DataFlow value) {
  
  data_dir_ = value;
}
inline void Header::set_data_dir(::insider::sdk::DataFlow value) {
  _internal_set_data_dir(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Header.data_dir)
}

// .insider.sdk.Host host = 6;
inline bool Header::_internal_has_host() const {
  return this != internal_default_instance() && host_ != nullptr;
}
inline bool Header::has_host() const {
  return _internal_has_host();
}
inline void Header::clear_host() {
  if (GetArenaNoVirtual() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
}
inline const ::insider::sdk::Host& Header::_internal_host() const {
  const ::insider::sdk::Host* p = host_;
  return p != nullptr ? *p : *reinterpret_cast<const ::insider::sdk::Host*>(
      &::insider::sdk::_Host_default_instance_);
}
inline const ::insider::sdk::Host& Header::host() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Header.host)
  return _internal_host();
}
inline ::insider::sdk::Host* Header::release_host() {
  // @@protoc_insertion_point(field_release:insider.sdk.Header.host)
  
  ::insider::sdk::Host* temp = host_;
  host_ = nullptr;
  return temp;
}
inline ::insider::sdk::Host* Header::_internal_mutable_host() {
  
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<::insider::sdk::Host>(GetArenaNoVirtual());
    host_ = p;
  }
  return host_;
}
inline ::insider::sdk::Host* Header::mutable_host() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.Header.host)
  return _internal_mutable_host();
}
inline void Header::set_allocated_host(::insider::sdk::Host* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete host_;
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.Header.host)
}

// .insider.sdk.Host dest = 7;
inline bool Header::_internal_has_dest() const {
  return this != internal_default_instance() && dest_ != nullptr;
}
inline bool Header::has_dest() const {
  return _internal_has_dest();
}
inline void Header::clear_dest() {
  if (GetArenaNoVirtual() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
}
inline const ::insider::sdk::Host& Header::_internal_dest() const {
  const ::insider::sdk::Host* p = dest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::insider::sdk::Host*>(
      &::insider::sdk::_Host_default_instance_);
}
inline const ::insider::sdk::Host& Header::dest() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Header.dest)
  return _internal_dest();
}
inline ::insider::sdk::Host* Header::release_dest() {
  // @@protoc_insertion_point(field_release:insider.sdk.Header.dest)
  
  ::insider::sdk::Host* temp = dest_;
  dest_ = nullptr;
  return temp;
}
inline ::insider::sdk::Host* Header::_internal_mutable_dest() {
  
  if (dest_ == nullptr) {
    auto* p = CreateMaybeMessage<::insider::sdk::Host>(GetArenaNoVirtual());
    dest_ = p;
  }
  return dest_;
}
inline ::insider::sdk::Host* Header::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.Header.dest)
  return _internal_mutable_dest();
}
inline void Header::set_allocated_dest(::insider::sdk::Host* dest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dest_;
  }
  if (dest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest, submessage_arena);
    }
    
  } else {
    
  }
  dest_ = dest;
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.Header.dest)
}

// .insider.sdk.TransProto trans_proto = 8;
inline void Header::clear_trans_proto() {
  trans_proto_ = 0;
}
inline ::insider::sdk::TransProto Header::_internal_trans_proto() const {
  return static_cast< ::insider::sdk::TransProto >(trans_proto_);
}
inline ::insider::sdk::TransProto Header::trans_proto() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Header.trans_proto)
  return _internal_trans_proto();
}
inline void Header::_internal_set_trans_proto(::insider::sdk::TransProto value) {
  
  trans_proto_ = value;
}
inline void Header::set_trans_proto(::insider::sdk::TransProto value) {
  _internal_set_trans_proto(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Header.trans_proto)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sdk
}  // namespace insider

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::insider::sdk::TransProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::insider::sdk::TransProto>() {
  return ::insider::sdk::TransProto_descriptor();
}
template <> struct is_proto_enum< ::insider::sdk::IpVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::insider::sdk::IpVersion>() {
  return ::insider::sdk::IpVersion_descriptor();
}
template <> struct is_proto_enum< ::insider::sdk::DataFlow> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::insider::sdk::DataFlow>() {
  return ::insider::sdk::DataFlow_descriptor();
}
template <> struct is_proto_enum< ::insider::sdk::SdkMagic> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::insider::sdk::SdkMagic>() {
  return ::insider::sdk::SdkMagic_descriptor();
}
template <> struct is_proto_enum< ::insider::sdk::SdkVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::insider::sdk::SdkVersion>() {
  return ::insider::sdk::SdkVersion_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_in_5fsdk_5fheader_2eproto
