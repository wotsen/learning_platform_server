// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_sdk_header.proto

#include "in_sdk_header.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataTime_in_5fsdk_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Host_in_5fsdk_5fheader_2eproto;
namespace insider {
namespace sdk {
class HostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Host> _instance;
} _Host_default_instance_;
class DataTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataTime> _instance;
} _DataTime_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
}  // namespace sdk
}  // namespace insider
static void InitDefaultsscc_info_DataTime_in_5fsdk_5fheader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::insider::sdk::_DataTime_default_instance_;
    new (ptr) ::insider::sdk::DataTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::insider::sdk::DataTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataTime_in_5fsdk_5fheader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataTime_in_5fsdk_5fheader_2eproto}, {}};

static void InitDefaultsscc_info_Header_in_5fsdk_5fheader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::insider::sdk::_Header_default_instance_;
    new (ptr) ::insider::sdk::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::insider::sdk::Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Header_in_5fsdk_5fheader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Header_in_5fsdk_5fheader_2eproto}, {
      &scc_info_DataTime_in_5fsdk_5fheader_2eproto.base,
      &scc_info_Host_in_5fsdk_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_Host_in_5fsdk_5fheader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::insider::sdk::_Host_default_instance_;
    new (ptr) ::insider::sdk::Host();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::insider::sdk::Host::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Host_in_5fsdk_5fheader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Host_in_5fsdk_5fheader_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_in_5fsdk_5fheader_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_in_5fsdk_5fheader_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_in_5fsdk_5fheader_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_in_5fsdk_5fheader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Host, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Host, ip_version_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Host, port_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Host, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::DataTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::DataTime, in_time_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::DataTime, out_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Header, msg_magic_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Header, version_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Header, pack_id_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Header, time_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Header, data_dir_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Header, host_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Header, dest_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Header, trans_proto_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::insider::sdk::Host)},
  { 8, -1, sizeof(::insider::sdk::DataTime)},
  { 15, -1, sizeof(::insider::sdk::Header)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::insider::sdk::_Host_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::insider::sdk::_DataTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::insider::sdk::_Header_default_instance_),
};

const char descriptor_table_protodef_in_5fsdk_5fheader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023in_sdk_header.proto\022\013insider.sdk\"L\n\004Ho"
  "st\022*\n\nip_version\030\001 \001(\0162\026.insider.sdk.IpV"
  "ersion\022\014\n\004port\030\002 \001(\005\022\n\n\002ip\030\003 \001(\t\"-\n\010Data"
  "Time\022\017\n\007in_time\030\001 \001(\003\022\020\n\010out_time\030\002 \001(\003\""
  "\253\002\n\006Header\022(\n\tmsg_magic\030\001 \001(\0162\025.insider."
  "sdk.SdkMagic\022(\n\007version\030\002 \001(\0162\027.insider."
  "sdk.SdkVersion\022\017\n\007pack_id\030\003 \001(\003\022#\n\004time\030"
  "\004 \001(\0132\025.insider.sdk.DataTime\022\'\n\010data_dir"
  "\030\005 \001(\0162\025.insider.sdk.DataFlow\022\037\n\004host\030\006 "
  "\001(\0132\021.insider.sdk.Host\022\037\n\004dest\030\007 \001(\0132\021.i"
  "nsider.sdk.Host\022,\n\013trans_proto\030\010 \001(\0162\027.i"
  "nsider.sdk.TransProto*7\n\nTransProto\022\027\n\023T"
  "RANS_PROTO_INVALID\020\000\022\007\n\003TCP\020\001\022\007\n\003UDP\020\002*7"
  "\n\tIpVersion\022\026\n\022IP_VERSION_INVALID\020\000\022\010\n\004I"
  "PV4\020\001\022\010\n\004IPV6\020\002*%\n\010DataFlow\022\013\n\007DATA_IN\020\000"
  "\022\014\n\010DATA_OUT\020\001*/\n\010SdkMagic\022\021\n\rSDK_NON_MA"
  "GIC\020\000\022\020\n\tSDK_MAGIC\020\357\233\257\r*9\n\nSdkVersion\022\023\n"
  "\017SDK_NON_VERSION\020\000\022\026\n\017SDK_CUR_VERSION\020\206\257"
  "\320\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_in_5fsdk_5fheader_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_in_5fsdk_5fheader_2eproto_sccs[3] = {
  &scc_info_DataTime_in_5fsdk_5fheader_2eproto.base,
  &scc_info_Header_in_5fsdk_5fheader_2eproto.base,
  &scc_info_Host_in_5fsdk_5fheader_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_in_5fsdk_5fheader_2eproto_once;
static bool descriptor_table_in_5fsdk_5fheader_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_in_5fsdk_5fheader_2eproto = {
  &descriptor_table_in_5fsdk_5fheader_2eproto_initialized, descriptor_table_protodef_in_5fsdk_5fheader_2eproto, "in_sdk_header.proto", 730,
  &descriptor_table_in_5fsdk_5fheader_2eproto_once, descriptor_table_in_5fsdk_5fheader_2eproto_sccs, descriptor_table_in_5fsdk_5fheader_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_in_5fsdk_5fheader_2eproto::offsets,
  file_level_metadata_in_5fsdk_5fheader_2eproto, 3, file_level_enum_descriptors_in_5fsdk_5fheader_2eproto, file_level_service_descriptors_in_5fsdk_5fheader_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_in_5fsdk_5fheader_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_in_5fsdk_5fheader_2eproto), true);
namespace insider {
namespace sdk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_in_5fsdk_5fheader_2eproto);
  return file_level_enum_descriptors_in_5fsdk_5fheader_2eproto[0];
}
bool TransProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_in_5fsdk_5fheader_2eproto);
  return file_level_enum_descriptors_in_5fsdk_5fheader_2eproto[1];
}
bool IpVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataFlow_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_in_5fsdk_5fheader_2eproto);
  return file_level_enum_descriptors_in_5fsdk_5fheader_2eproto[2];
}
bool DataFlow_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SdkMagic_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_in_5fsdk_5fheader_2eproto);
  return file_level_enum_descriptors_in_5fsdk_5fheader_2eproto[3];
}
bool SdkMagic_IsValid(int value) {
  switch (value) {
    case 0:
    case 28036591:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SdkVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_in_5fsdk_5fheader_2eproto);
  return file_level_enum_descriptors_in_5fsdk_5fheader_2eproto[4];
}
bool SdkVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 20191110:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Host::InitAsDefaultInstance() {
}
class Host::_Internal {
 public:
};

Host::Host()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:insider.sdk.Host)
}
Host::Host(const Host& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&ip_version_, &from.ip_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&ip_version_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:insider.sdk.Host)
}

void Host::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Host_in_5fsdk_5fheader_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_version_)) + sizeof(port_));
}

Host::~Host() {
  // @@protoc_insertion_point(destructor:insider.sdk.Host)
  SharedDtor();
}

void Host::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Host::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Host& Host::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Host_in_5fsdk_5fheader_2eproto.base);
  return *internal_default_instance();
}


void Host::Clear() {
// @@protoc_insertion_point(message_clear_start:insider.sdk.Host)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_version_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

const char* Host::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .insider.sdk.IpVersion ip_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ip_version(static_cast<::insider::sdk::IpVersion>(val));
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_ip(), ptr, ctx, "insider.sdk.Host.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Host::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:insider.sdk.Host)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .insider.sdk.IpVersion ip_version = 1;
  if (this->ip_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ip_version(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "insider.sdk.Host.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:insider.sdk.Host)
  return target;
}

size_t Host::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:insider.sdk.Host)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .insider.sdk.IpVersion ip_version = 1;
  if (this->ip_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ip_version());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Host::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:insider.sdk.Host)
  GOOGLE_DCHECK_NE(&from, this);
  const Host* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Host>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:insider.sdk.Host)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:insider.sdk.Host)
    MergeFrom(*source);
  }
}

void Host::MergeFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:insider.sdk.Host)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.ip_version() != 0) {
    _internal_set_ip_version(from._internal_ip_version());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void Host::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:insider.sdk.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Host::CopyFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:insider.sdk.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Host::IsInitialized() const {
  return true;
}

void Host::InternalSwap(Host* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ip_version_, other->ip_version_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Host::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataTime::InitAsDefaultInstance() {
}
class DataTime::_Internal {
 public:
};

DataTime::DataTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:insider.sdk.DataTime)
}
DataTime::DataTime(const DataTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&in_time_, &from.in_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_time_) -
    reinterpret_cast<char*>(&in_time_)) + sizeof(out_time_));
  // @@protoc_insertion_point(copy_constructor:insider.sdk.DataTime)
}

void DataTime::SharedCtor() {
  ::memset(&in_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_time_) -
      reinterpret_cast<char*>(&in_time_)) + sizeof(out_time_));
}

DataTime::~DataTime() {
  // @@protoc_insertion_point(destructor:insider.sdk.DataTime)
  SharedDtor();
}

void DataTime::SharedDtor() {
}

void DataTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataTime& DataTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataTime_in_5fsdk_5fheader_2eproto.base);
  return *internal_default_instance();
}


void DataTime::Clear() {
// @@protoc_insertion_point(message_clear_start:insider.sdk.DataTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&in_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_time_) -
      reinterpret_cast<char*>(&in_time_)) + sizeof(out_time_));
  _internal_metadata_.Clear();
}

const char* DataTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 in_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          in_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 out_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:insider.sdk.DataTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 in_time = 1;
  if (this->in_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_in_time(), target);
  }

  // int64 out_time = 2;
  if (this->out_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_out_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:insider.sdk.DataTime)
  return target;
}

size_t DataTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:insider.sdk.DataTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 in_time = 1;
  if (this->in_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_in_time());
  }

  // int64 out_time = 2;
  if (this->out_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_out_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:insider.sdk.DataTime)
  GOOGLE_DCHECK_NE(&from, this);
  const DataTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:insider.sdk.DataTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:insider.sdk.DataTime)
    MergeFrom(*source);
  }
}

void DataTime::MergeFrom(const DataTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:insider.sdk.DataTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.in_time() != 0) {
    _internal_set_in_time(from._internal_in_time());
  }
  if (from.out_time() != 0) {
    _internal_set_out_time(from._internal_out_time());
  }
}

void DataTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:insider.sdk.DataTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTime::CopyFrom(const DataTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:insider.sdk.DataTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTime::IsInitialized() const {
  return true;
}

void DataTime::InternalSwap(DataTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(in_time_, other->in_time_);
  swap(out_time_, other->out_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::insider::sdk::_Header_default_instance_._instance.get_mutable()->time_ = const_cast< ::insider::sdk::DataTime*>(
      ::insider::sdk::DataTime::internal_default_instance());
  ::insider::sdk::_Header_default_instance_._instance.get_mutable()->host_ = const_cast< ::insider::sdk::Host*>(
      ::insider::sdk::Host::internal_default_instance());
  ::insider::sdk::_Header_default_instance_._instance.get_mutable()->dest_ = const_cast< ::insider::sdk::Host*>(
      ::insider::sdk::Host::internal_default_instance());
}
class Header::_Internal {
 public:
  static const ::insider::sdk::DataTime& time(const Header* msg);
  static const ::insider::sdk::Host& host(const Header* msg);
  static const ::insider::sdk::Host& dest(const Header* msg);
};

const ::insider::sdk::DataTime&
Header::_Internal::time(const Header* msg) {
  return *msg->time_;
}
const ::insider::sdk::Host&
Header::_Internal::host(const Header* msg) {
  return *msg->host_;
}
const ::insider::sdk::Host&
Header::_Internal::dest(const Header* msg) {
  return *msg->dest_;
}
Header::Header()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:insider.sdk.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::insider::sdk::DataTime(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_host()) {
    host_ = new ::insider::sdk::Host(*from.host_);
  } else {
    host_ = nullptr;
  }
  if (from._internal_has_dest()) {
    dest_ = new ::insider::sdk::Host(*from.dest_);
  } else {
    dest_ = nullptr;
  }
  ::memcpy(&msg_magic_, &from.msg_magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&trans_proto_) -
    reinterpret_cast<char*>(&msg_magic_)) + sizeof(trans_proto_));
  // @@protoc_insertion_point(copy_constructor:insider.sdk.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_in_5fsdk_5fheader_2eproto.base);
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_proto_) -
      reinterpret_cast<char*>(&time_)) + sizeof(trans_proto_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:insider.sdk.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete host_;
  if (this != internal_default_instance()) delete dest_;
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_in_5fsdk_5fheader_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:insider.sdk.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
  ::memset(&msg_magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_proto_) -
      reinterpret_cast<char*>(&msg_magic_)) + sizeof(trans_proto_));
  _internal_metadata_.Clear();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .insider.sdk.SdkMagic msg_magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_msg_magic(static_cast<::insider::sdk::SdkMagic>(val));
        } else goto handle_unusual;
        continue;
      // .insider.sdk.SdkVersion version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_version(static_cast<::insider::sdk::SdkVersion>(val));
        } else goto handle_unusual;
        continue;
      // int64 pack_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .insider.sdk.DataTime time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .insider.sdk.DataFlow data_dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_data_dir(static_cast<::insider::sdk::DataFlow>(val));
        } else goto handle_unusual;
        continue;
      // .insider.sdk.Host host = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_host(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .insider.sdk.Host dest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .insider.sdk.TransProto trans_proto = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_trans_proto(static_cast<::insider::sdk::TransProto>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:insider.sdk.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .insider.sdk.SdkMagic msg_magic = 1;
  if (this->msg_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_magic(), target);
  }

  // .insider.sdk.SdkVersion version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_version(), target);
  }

  // int64 pack_id = 3;
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_pack_id(), target);
  }

  // .insider.sdk.DataTime time = 4;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::time(this), target, stream);
  }

  // .insider.sdk.DataFlow data_dir = 5;
  if (this->data_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_data_dir(), target);
  }

  // .insider.sdk.Host host = 6;
  if (this->has_host()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::host(this), target, stream);
  }

  // .insider.sdk.Host dest = 7;
  if (this->has_dest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::dest(this), target, stream);
  }

  // .insider.sdk.TransProto trans_proto = 8;
  if (this->trans_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_trans_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:insider.sdk.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:insider.sdk.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .insider.sdk.DataTime time = 4;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .insider.sdk.Host host = 6;
  if (this->has_host()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_);
  }

  // .insider.sdk.Host dest = 7;
  if (this->has_dest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);
  }

  // .insider.sdk.SdkMagic msg_magic = 1;
  if (this->msg_magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_magic());
  }

  // .insider.sdk.SdkVersion version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_version());
  }

  // int64 pack_id = 3;
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pack_id());
  }

  // .insider.sdk.DataFlow data_dir = 5;
  if (this->data_dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_dir());
  }

  // .insider.sdk.TransProto trans_proto = 8;
  if (this->trans_proto() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trans_proto());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:insider.sdk.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:insider.sdk.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:insider.sdk.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:insider.sdk.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time()) {
    _internal_mutable_time()->::insider::sdk::DataTime::MergeFrom(from._internal_time());
  }
  if (from.has_host()) {
    _internal_mutable_host()->::insider::sdk::Host::MergeFrom(from._internal_host());
  }
  if (from.has_dest()) {
    _internal_mutable_dest()->::insider::sdk::Host::MergeFrom(from._internal_dest());
  }
  if (from.msg_magic() != 0) {
    _internal_set_msg_magic(from._internal_msg_magic());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
  if (from.data_dir() != 0) {
    _internal_set_data_dir(from._internal_data_dir());
  }
  if (from.trans_proto() != 0) {
    _internal_set_trans_proto(from._internal_trans_proto());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:insider.sdk.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:insider.sdk.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(host_, other->host_);
  swap(dest_, other->dest_);
  swap(msg_magic_, other->msg_magic_);
  swap(version_, other->version_);
  swap(pack_id_, other->pack_id_);
  swap(data_dir_, other->data_dir_);
  swap(trans_proto_, other->trans_proto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sdk
}  // namespace insider
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::insider::sdk::Host* Arena::CreateMaybeMessage< ::insider::sdk::Host >(Arena* arena) {
  return Arena::CreateInternal< ::insider::sdk::Host >(arena);
}
template<> PROTOBUF_NOINLINE ::insider::sdk::DataTime* Arena::CreateMaybeMessage< ::insider::sdk::DataTime >(Arena* arena) {
  return Arena::CreateInternal< ::insider::sdk::DataTime >(arena);
}
template<> PROTOBUF_NOINLINE ::insider::sdk::Header* Arena::CreateMaybeMessage< ::insider::sdk::Header >(Arena* arena) {
  return Arena::CreateInternal< ::insider::sdk::Header >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
