// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_sdk_body_user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_in_5fsdk_5fbody_5fuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_in_5fsdk_5fbody_5fuser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fbody_5fuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_in_5fsdk_5fbody_5fuser_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_in_5fsdk_5fbody_5fuser_2eproto;
namespace insider {
namespace sdk {
class UserAllInfo;
class UserAllInfoDefaultTypeInternal;
extern UserAllInfoDefaultTypeInternal _UserAllInfo_default_instance_;
class UserBaseInfo;
class UserBaseInfoDefaultTypeInternal;
extern UserBaseInfoDefaultTypeInternal _UserBaseInfo_default_instance_;
class UserList;
class UserListDefaultTypeInternal;
extern UserListDefaultTypeInternal _UserList_default_instance_;
class UserSessionMsg;
class UserSessionMsgDefaultTypeInternal;
extern UserSessionMsgDefaultTypeInternal _UserSessionMsg_default_instance_;
}  // namespace sdk
}  // namespace insider
PROTOBUF_NAMESPACE_OPEN
template<> ::insider::sdk::UserAllInfo* Arena::CreateMaybeMessage<::insider::sdk::UserAllInfo>(Arena*);
template<> ::insider::sdk::UserBaseInfo* Arena::CreateMaybeMessage<::insider::sdk::UserBaseInfo>(Arena*);
template<> ::insider::sdk::UserList* Arena::CreateMaybeMessage<::insider::sdk::UserList>(Arena*);
template<> ::insider::sdk::UserSessionMsg* Arena::CreateMaybeMessage<::insider::sdk::UserSessionMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace insider {
namespace sdk {

enum UserSessionMsg_UserMethod : int {
  UserSessionMsg_UserMethod_U_LOGIN = 0,
  UserSessionMsg_UserMethod_U_LOGOUT = 1,
  UserSessionMsg_UserMethod_U_VERI = 2,
  UserSessionMsg_UserMethod_U_REGISTER = 3,
  UserSessionMsg_UserMethod_UserSessionMsg_UserMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserSessionMsg_UserMethod_UserSessionMsg_UserMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserSessionMsg_UserMethod_IsValid(int value);
constexpr UserSessionMsg_UserMethod UserSessionMsg_UserMethod_UserMethod_MIN = UserSessionMsg_UserMethod_U_LOGIN;
constexpr UserSessionMsg_UserMethod UserSessionMsg_UserMethod_UserMethod_MAX = UserSessionMsg_UserMethod_U_REGISTER;
constexpr int UserSessionMsg_UserMethod_UserMethod_ARRAYSIZE = UserSessionMsg_UserMethod_UserMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserSessionMsg_UserMethod_descriptor();
template<typename T>
inline const std::string& UserSessionMsg_UserMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserSessionMsg_UserMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserSessionMsg_UserMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserSessionMsg_UserMethod_descriptor(), enum_t_value);
}
inline bool UserSessionMsg_UserMethod_Parse(
    const std::string& name, UserSessionMsg_UserMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserSessionMsg_UserMethod>(
    UserSessionMsg_UserMethod_descriptor(), name, value);
}
enum UserPermissson : int {
  U_PERMISSION_INVALID = 0,
  U_PERMISSION_ADMIN = 1,
  U_PERMISSION_ADVANCED = 2,
  U_PERMOSSION_NORMAL = 3,
  UserPermissson_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserPermissson_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserPermissson_IsValid(int value);
constexpr UserPermissson UserPermissson_MIN = U_PERMISSION_INVALID;
constexpr UserPermissson UserPermissson_MAX = U_PERMOSSION_NORMAL;
constexpr int UserPermissson_ARRAYSIZE = UserPermissson_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserPermissson_descriptor();
template<typename T>
inline const std::string& UserPermissson_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserPermissson>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserPermissson_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserPermissson_descriptor(), enum_t_value);
}
inline bool UserPermissson_Parse(
    const std::string& name, UserPermissson* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserPermissson>(
    UserPermissson_descriptor(), name, value);
}
// ===================================================================

class UserBaseInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.UserBaseInfo) */ {
 public:
  UserBaseInfo();
  virtual ~UserBaseInfo();

  UserBaseInfo(const UserBaseInfo& from);
  UserBaseInfo(UserBaseInfo&& from) noexcept
    : UserBaseInfo() {
    *this = ::std::move(from);
  }

  inline UserBaseInfo& operator=(const UserBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserBaseInfo& operator=(UserBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserBaseInfo* internal_default_instance() {
    return reinterpret_cast<const UserBaseInfo*>(
               &_UserBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserBaseInfo& a, UserBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserBaseInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserBaseInfo* New() const final {
    return CreateMaybeMessage<UserBaseInfo>(nullptr);
  }

  UserBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserBaseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserBaseInfo& from);
  void MergeFrom(const UserBaseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBaseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.UserBaseInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fbody_5fuser_2eproto);
    return ::descriptor_table_in_5fsdk_5fbody_5fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserPassFieldNumber = 2,
    kEmailFieldNumber = 4,
    kPhoneFieldNumber = 5,
    kPermissionFieldNumber = 3,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string user_pass = 2;
  void clear_user_pass();
  const std::string& user_pass() const;
  void set_user_pass(const std::string& value);
  void set_user_pass(std::string&& value);
  void set_user_pass(const char* value);
  void set_user_pass(const char* value, size_t size);
  std::string* mutable_user_pass();
  std::string* release_user_pass();
  void set_allocated_user_pass(std::string* user_pass);
  private:
  const std::string& _internal_user_pass() const;
  void _internal_set_user_pass(const std::string& value);
  std::string* _internal_mutable_user_pass();
  public:

  // string email = 4;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string phone = 5;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // .insider.sdk.UserPermissson permission = 3;
  void clear_permission();
  ::insider::sdk::UserPermissson permission() const;
  void set_permission(::insider::sdk::UserPermissson value);
  private:
  ::insider::sdk::UserPermissson _internal_permission() const;
  void _internal_set_permission(::insider::sdk::UserPermissson value);
  public:

  // @@protoc_insertion_point(class_scope:insider.sdk.UserBaseInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_pass_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  int permission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fbody_5fuser_2eproto;
};
// -------------------------------------------------------------------

class UserAllInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.UserAllInfo) */ {
 public:
  UserAllInfo();
  virtual ~UserAllInfo();

  UserAllInfo(const UserAllInfo& from);
  UserAllInfo(UserAllInfo&& from) noexcept
    : UserAllInfo() {
    *this = ::std::move(from);
  }

  inline UserAllInfo& operator=(const UserAllInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAllInfo& operator=(UserAllInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAllInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAllInfo* internal_default_instance() {
    return reinterpret_cast<const UserAllInfo*>(
               &_UserAllInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserAllInfo& a, UserAllInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAllInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAllInfo* New() const final {
    return CreateMaybeMessage<UserAllInfo>(nullptr);
  }

  UserAllInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAllInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAllInfo& from);
  void MergeFrom(const UserAllInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAllInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.UserAllInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fbody_5fuser_2eproto);
    return ::descriptor_table_in_5fsdk_5fbody_5fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserBaseInfoFieldNumber = 1,
    kInBlacklistFieldNumber = 2,
    kValidFieldNumber = 3,
  };
  // .insider.sdk.UserBaseInfo user_base_info = 1;
  bool has_user_base_info() const;
  private:
  bool _internal_has_user_base_info() const;
  public:
  void clear_user_base_info();
  const ::insider::sdk::UserBaseInfo& user_base_info() const;
  ::insider::sdk::UserBaseInfo* release_user_base_info();
  ::insider::sdk::UserBaseInfo* mutable_user_base_info();
  void set_allocated_user_base_info(::insider::sdk::UserBaseInfo* user_base_info);
  private:
  const ::insider::sdk::UserBaseInfo& _internal_user_base_info() const;
  ::insider::sdk::UserBaseInfo* _internal_mutable_user_base_info();
  public:

  // bool in_blacklist = 2;
  void clear_in_blacklist();
  bool in_blacklist() const;
  void set_in_blacklist(bool value);
  private:
  bool _internal_in_blacklist() const;
  void _internal_set_in_blacklist(bool value);
  public:

  // bool valid = 3;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:insider.sdk.UserAllInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::insider::sdk::UserBaseInfo* user_base_info_;
  bool in_blacklist_;
  bool valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fbody_5fuser_2eproto;
};
// -------------------------------------------------------------------

class UserList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.UserList) */ {
 public:
  UserList();
  virtual ~UserList();

  UserList(const UserList& from);
  UserList(UserList&& from) noexcept
    : UserList() {
    *this = ::std::move(from);
  }

  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserList& operator=(UserList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserList* internal_default_instance() {
    return reinterpret_cast<const UserList*>(
               &_UserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserList& a, UserList& b) {
    a.Swap(&b);
  }
  inline void Swap(UserList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserList* New() const final {
    return CreateMaybeMessage<UserList>(nullptr);
  }

  UserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserList& from);
  void MergeFrom(const UserList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.UserList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fbody_5fuser_2eproto);
    return ::descriptor_table_in_5fsdk_5fbody_5fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // repeated .insider.sdk.UserAllInfo user_info = 1;
  int user_info_size() const;
  private:
  int _internal_user_info_size() const;
  public:
  void clear_user_info();
  ::insider::sdk::UserAllInfo* mutable_user_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::UserAllInfo >*
      mutable_user_info();
  private:
  const ::insider::sdk::UserAllInfo& _internal_user_info(int index) const;
  ::insider::sdk::UserAllInfo* _internal_add_user_info();
  public:
  const ::insider::sdk::UserAllInfo& user_info(int index) const;
  ::insider::sdk::UserAllInfo* add_user_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::UserAllInfo >&
      user_info() const;

  // @@protoc_insertion_point(class_scope:insider.sdk.UserList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::UserAllInfo > user_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fbody_5fuser_2eproto;
};
// -------------------------------------------------------------------

class UserSessionMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.UserSessionMsg) */ {
 public:
  UserSessionMsg();
  virtual ~UserSessionMsg();

  UserSessionMsg(const UserSessionMsg& from);
  UserSessionMsg(UserSessionMsg&& from) noexcept
    : UserSessionMsg() {
    *this = ::std::move(from);
  }

  inline UserSessionMsg& operator=(const UserSessionMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSessionMsg& operator=(UserSessionMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSessionMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSessionMsg* internal_default_instance() {
    return reinterpret_cast<const UserSessionMsg*>(
               &_UserSessionMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserSessionMsg& a, UserSessionMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSessionMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSessionMsg* New() const final {
    return CreateMaybeMessage<UserSessionMsg>(nullptr);
  }

  UserSessionMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSessionMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSessionMsg& from);
  void MergeFrom(const UserSessionMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSessionMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.UserSessionMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fbody_5fuser_2eproto);
    return ::descriptor_table_in_5fsdk_5fbody_5fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserSessionMsg_UserMethod UserMethod;
  static constexpr UserMethod U_LOGIN =
    UserSessionMsg_UserMethod_U_LOGIN;
  static constexpr UserMethod U_LOGOUT =
    UserSessionMsg_UserMethod_U_LOGOUT;
  static constexpr UserMethod U_VERI =
    UserSessionMsg_UserMethod_U_VERI;
  static constexpr UserMethod U_REGISTER =
    UserSessionMsg_UserMethod_U_REGISTER;
  static inline bool UserMethod_IsValid(int value) {
    return UserSessionMsg_UserMethod_IsValid(value);
  }
  static constexpr UserMethod UserMethod_MIN =
    UserSessionMsg_UserMethod_UserMethod_MIN;
  static constexpr UserMethod UserMethod_MAX =
    UserSessionMsg_UserMethod_UserMethod_MAX;
  static constexpr int UserMethod_ARRAYSIZE =
    UserSessionMsg_UserMethod_UserMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UserMethod_descriptor() {
    return UserSessionMsg_UserMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& UserMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserMethod_Name.");
    return UserSessionMsg_UserMethod_Name(enum_t_value);
  }
  static inline bool UserMethod_Parse(const std::string& name,
      UserMethod* value) {
    return UserSessionMsg_UserMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kUserFieldNumber = 2,
    kAliveTimeFieldNumber = 4,
    kUserTypeFieldNumber = 1,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .insider.sdk.UserBaseInfo user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::insider::sdk::UserBaseInfo& user() const;
  ::insider::sdk::UserBaseInfo* release_user();
  ::insider::sdk::UserBaseInfo* mutable_user();
  void set_allocated_user(::insider::sdk::UserBaseInfo* user);
  private:
  const ::insider::sdk::UserBaseInfo& _internal_user() const;
  ::insider::sdk::UserBaseInfo* _internal_mutable_user();
  public:

  // uint64 alive_time = 4;
  void clear_alive_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 alive_time() const;
  void set_alive_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_alive_time() const;
  void _internal_set_alive_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .insider.sdk.UserSessionMsg.UserMethod user_type = 1;
  void clear_user_type();
  ::insider::sdk::UserSessionMsg_UserMethod user_type() const;
  void set_user_type(::insider::sdk::UserSessionMsg_UserMethod value);
  private:
  ::insider::sdk::UserSessionMsg_UserMethod _internal_user_type() const;
  void _internal_set_user_type(::insider::sdk::UserSessionMsg_UserMethod value);
  public:

  // @@protoc_insertion_point(class_scope:insider.sdk.UserSessionMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::insider::sdk::UserBaseInfo* user_;
  ::PROTOBUF_NAMESPACE_ID::uint64 alive_time_;
  int user_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fbody_5fuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserBaseInfo

// string user_name = 1;
inline void UserBaseInfo::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserBaseInfo::user_name() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserBaseInfo.user_name)
  return _internal_user_name();
}
inline void UserBaseInfo::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserBaseInfo.user_name)
}
inline std::string* UserBaseInfo::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.UserBaseInfo.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& UserBaseInfo::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void UserBaseInfo::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserBaseInfo::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:insider.sdk.UserBaseInfo.user_name)
}
inline void UserBaseInfo::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:insider.sdk.UserBaseInfo.user_name)
}
inline void UserBaseInfo::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:insider.sdk.UserBaseInfo.user_name)
}
inline std::string* UserBaseInfo::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserBaseInfo::release_user_name() {
  // @@protoc_insertion_point(field_release:insider.sdk.UserBaseInfo.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.UserBaseInfo.user_name)
}

// string user_pass = 2;
inline void UserBaseInfo::clear_user_pass() {
  user_pass_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserBaseInfo::user_pass() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserBaseInfo.user_pass)
  return _internal_user_pass();
}
inline void UserBaseInfo::set_user_pass(const std::string& value) {
  _internal_set_user_pass(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserBaseInfo.user_pass)
}
inline std::string* UserBaseInfo::mutable_user_pass() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.UserBaseInfo.user_pass)
  return _internal_mutable_user_pass();
}
inline const std::string& UserBaseInfo::_internal_user_pass() const {
  return user_pass_.GetNoArena();
}
inline void UserBaseInfo::_internal_set_user_pass(const std::string& value) {
  
  user_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserBaseInfo::set_user_pass(std::string&& value) {
  
  user_pass_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:insider.sdk.UserBaseInfo.user_pass)
}
inline void UserBaseInfo::set_user_pass(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:insider.sdk.UserBaseInfo.user_pass)
}
inline void UserBaseInfo::set_user_pass(const char* value, size_t size) {
  
  user_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:insider.sdk.UserBaseInfo.user_pass)
}
inline std::string* UserBaseInfo::_internal_mutable_user_pass() {
  
  return user_pass_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserBaseInfo::release_user_pass() {
  // @@protoc_insertion_point(field_release:insider.sdk.UserBaseInfo.user_pass)
  
  return user_pass_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_allocated_user_pass(std::string* user_pass) {
  if (user_pass != nullptr) {
    
  } else {
    
  }
  user_pass_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_pass);
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.UserBaseInfo.user_pass)
}

// .insider.sdk.UserPermissson permission = 3;
inline void UserBaseInfo::clear_permission() {
  permission_ = 0;
}
inline ::insider::sdk::UserPermissson UserBaseInfo::_internal_permission() const {
  return static_cast< ::insider::sdk::UserPermissson >(permission_);
}
inline ::insider::sdk::UserPermissson UserBaseInfo::permission() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserBaseInfo.permission)
  return _internal_permission();
}
inline void UserBaseInfo::_internal_set_permission(::insider::sdk::UserPermissson value) {
  
  permission_ = value;
}
inline void UserBaseInfo::set_permission(::insider::sdk::UserPermissson value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserBaseInfo.permission)
}

// string email = 4;
inline void UserBaseInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserBaseInfo::email() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserBaseInfo.email)
  return _internal_email();
}
inline void UserBaseInfo::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserBaseInfo.email)
}
inline std::string* UserBaseInfo::mutable_email() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.UserBaseInfo.email)
  return _internal_mutable_email();
}
inline const std::string& UserBaseInfo::_internal_email() const {
  return email_.GetNoArena();
}
inline void UserBaseInfo::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserBaseInfo::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:insider.sdk.UserBaseInfo.email)
}
inline void UserBaseInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:insider.sdk.UserBaseInfo.email)
}
inline void UserBaseInfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:insider.sdk.UserBaseInfo.email)
}
inline std::string* UserBaseInfo::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserBaseInfo::release_email() {
  // @@protoc_insertion_point(field_release:insider.sdk.UserBaseInfo.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.UserBaseInfo.email)
}

// string phone = 5;
inline void UserBaseInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserBaseInfo::phone() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserBaseInfo.phone)
  return _internal_phone();
}
inline void UserBaseInfo::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserBaseInfo.phone)
}
inline std::string* UserBaseInfo::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.UserBaseInfo.phone)
  return _internal_mutable_phone();
}
inline const std::string& UserBaseInfo::_internal_phone() const {
  return phone_.GetNoArena();
}
inline void UserBaseInfo::_internal_set_phone(const std::string& value) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserBaseInfo::set_phone(std::string&& value) {
  
  phone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:insider.sdk.UserBaseInfo.phone)
}
inline void UserBaseInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:insider.sdk.UserBaseInfo.phone)
}
inline void UserBaseInfo::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:insider.sdk.UserBaseInfo.phone)
}
inline std::string* UserBaseInfo::_internal_mutable_phone() {
  
  return phone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserBaseInfo::release_phone() {
  // @@protoc_insertion_point(field_release:insider.sdk.UserBaseInfo.phone)
  
  return phone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.UserBaseInfo.phone)
}

// -------------------------------------------------------------------

// UserAllInfo

// .insider.sdk.UserBaseInfo user_base_info = 1;
inline bool UserAllInfo::_internal_has_user_base_info() const {
  return this != internal_default_instance() && user_base_info_ != nullptr;
}
inline bool UserAllInfo::has_user_base_info() const {
  return _internal_has_user_base_info();
}
inline void UserAllInfo::clear_user_base_info() {
  if (GetArenaNoVirtual() == nullptr && user_base_info_ != nullptr) {
    delete user_base_info_;
  }
  user_base_info_ = nullptr;
}
inline const ::insider::sdk::UserBaseInfo& UserAllInfo::_internal_user_base_info() const {
  const ::insider::sdk::UserBaseInfo* p = user_base_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::insider::sdk::UserBaseInfo*>(
      &::insider::sdk::_UserBaseInfo_default_instance_);
}
inline const ::insider::sdk::UserBaseInfo& UserAllInfo::user_base_info() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserAllInfo.user_base_info)
  return _internal_user_base_info();
}
inline ::insider::sdk::UserBaseInfo* UserAllInfo::release_user_base_info() {
  // @@protoc_insertion_point(field_release:insider.sdk.UserAllInfo.user_base_info)
  
  ::insider::sdk::UserBaseInfo* temp = user_base_info_;
  user_base_info_ = nullptr;
  return temp;
}
inline ::insider::sdk::UserBaseInfo* UserAllInfo::_internal_mutable_user_base_info() {
  
  if (user_base_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::insider::sdk::UserBaseInfo>(GetArenaNoVirtual());
    user_base_info_ = p;
  }
  return user_base_info_;
}
inline ::insider::sdk::UserBaseInfo* UserAllInfo::mutable_user_base_info() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.UserAllInfo.user_base_info)
  return _internal_mutable_user_base_info();
}
inline void UserAllInfo::set_allocated_user_base_info(::insider::sdk::UserBaseInfo* user_base_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_base_info_;
  }
  if (user_base_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_base_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_base_info, submessage_arena);
    }
    
  } else {
    
  }
  user_base_info_ = user_base_info;
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.UserAllInfo.user_base_info)
}

// bool in_blacklist = 2;
inline void UserAllInfo::clear_in_blacklist() {
  in_blacklist_ = false;
}
inline bool UserAllInfo::_internal_in_blacklist() const {
  return in_blacklist_;
}
inline bool UserAllInfo::in_blacklist() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserAllInfo.in_blacklist)
  return _internal_in_blacklist();
}
inline void UserAllInfo::_internal_set_in_blacklist(bool value) {
  
  in_blacklist_ = value;
}
inline void UserAllInfo::set_in_blacklist(bool value) {
  _internal_set_in_blacklist(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserAllInfo.in_blacklist)
}

// bool valid = 3;
inline void UserAllInfo::clear_valid() {
  valid_ = false;
}
inline bool UserAllInfo::_internal_valid() const {
  return valid_;
}
inline bool UserAllInfo::valid() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserAllInfo.valid)
  return _internal_valid();
}
inline void UserAllInfo::_internal_set_valid(bool value) {
  
  valid_ = value;
}
inline void UserAllInfo::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserAllInfo.valid)
}

// -------------------------------------------------------------------

// UserList

// repeated .insider.sdk.UserAllInfo user_info = 1;
inline int UserList::_internal_user_info_size() const {
  return user_info_.size();
}
inline int UserList::user_info_size() const {
  return _internal_user_info_size();
}
inline void UserList::clear_user_info() {
  user_info_.Clear();
}
inline ::insider::sdk::UserAllInfo* UserList::mutable_user_info(int index) {
  // @@protoc_insertion_point(field_mutable:insider.sdk.UserList.user_info)
  return user_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::UserAllInfo >*
UserList::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable_list:insider.sdk.UserList.user_info)
  return &user_info_;
}
inline const ::insider::sdk::UserAllInfo& UserList::_internal_user_info(int index) const {
  return user_info_.Get(index);
}
inline const ::insider::sdk::UserAllInfo& UserList::user_info(int index) const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserList.user_info)
  return _internal_user_info(index);
}
inline ::insider::sdk::UserAllInfo* UserList::_internal_add_user_info() {
  return user_info_.Add();
}
inline ::insider::sdk::UserAllInfo* UserList::add_user_info() {
  // @@protoc_insertion_point(field_add:insider.sdk.UserList.user_info)
  return _internal_add_user_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::UserAllInfo >&
UserList::user_info() const {
  // @@protoc_insertion_point(field_list:insider.sdk.UserList.user_info)
  return user_info_;
}

// -------------------------------------------------------------------

// UserSessionMsg

// .insider.sdk.UserSessionMsg.UserMethod user_type = 1;
inline void UserSessionMsg::clear_user_type() {
  user_type_ = 0;
}
inline ::insider::sdk::UserSessionMsg_UserMethod UserSessionMsg::_internal_user_type() const {
  return static_cast< ::insider::sdk::UserSessionMsg_UserMethod >(user_type_);
}
inline ::insider::sdk::UserSessionMsg_UserMethod UserSessionMsg::user_type() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserSessionMsg.user_type)
  return _internal_user_type();
}
inline void UserSessionMsg::_internal_set_user_type(::insider::sdk::UserSessionMsg_UserMethod value) {
  
  user_type_ = value;
}
inline void UserSessionMsg::set_user_type(::insider::sdk::UserSessionMsg_UserMethod value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserSessionMsg.user_type)
}

// .insider.sdk.UserBaseInfo user = 2;
inline bool UserSessionMsg::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool UserSessionMsg::has_user() const {
  return _internal_has_user();
}
inline void UserSessionMsg::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::insider::sdk::UserBaseInfo& UserSessionMsg::_internal_user() const {
  const ::insider::sdk::UserBaseInfo* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::insider::sdk::UserBaseInfo*>(
      &::insider::sdk::_UserBaseInfo_default_instance_);
}
inline const ::insider::sdk::UserBaseInfo& UserSessionMsg::user() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserSessionMsg.user)
  return _internal_user();
}
inline ::insider::sdk::UserBaseInfo* UserSessionMsg::release_user() {
  // @@protoc_insertion_point(field_release:insider.sdk.UserSessionMsg.user)
  
  ::insider::sdk::UserBaseInfo* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::insider::sdk::UserBaseInfo* UserSessionMsg::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::insider::sdk::UserBaseInfo>(GetArenaNoVirtual());
    user_ = p;
  }
  return user_;
}
inline ::insider::sdk::UserBaseInfo* UserSessionMsg::mutable_user() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.UserSessionMsg.user)
  return _internal_mutable_user();
}
inline void UserSessionMsg::set_allocated_user(::insider::sdk::UserBaseInfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.UserSessionMsg.user)
}

// string token = 3;
inline void UserSessionMsg::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserSessionMsg::token() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserSessionMsg.token)
  return _internal_token();
}
inline void UserSessionMsg::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserSessionMsg.token)
}
inline std::string* UserSessionMsg::mutable_token() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.UserSessionMsg.token)
  return _internal_mutable_token();
}
inline const std::string& UserSessionMsg::_internal_token() const {
  return token_.GetNoArena();
}
inline void UserSessionMsg::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserSessionMsg::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:insider.sdk.UserSessionMsg.token)
}
inline void UserSessionMsg::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:insider.sdk.UserSessionMsg.token)
}
inline void UserSessionMsg::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:insider.sdk.UserSessionMsg.token)
}
inline std::string* UserSessionMsg::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserSessionMsg::release_token() {
  // @@protoc_insertion_point(field_release:insider.sdk.UserSessionMsg.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserSessionMsg::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.UserSessionMsg.token)
}

// uint64 alive_time = 4;
inline void UserSessionMsg::clear_alive_time() {
  alive_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserSessionMsg::_internal_alive_time() const {
  return alive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserSessionMsg::alive_time() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserSessionMsg.alive_time)
  return _internal_alive_time();
}
inline void UserSessionMsg::_internal_set_alive_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  alive_time_ = value;
}
inline void UserSessionMsg::set_alive_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_alive_time(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserSessionMsg.alive_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sdk
}  // namespace insider

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::insider::sdk::UserSessionMsg_UserMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::insider::sdk::UserSessionMsg_UserMethod>() {
  return ::insider::sdk::UserSessionMsg_UserMethod_descriptor();
}
template <> struct is_proto_enum< ::insider::sdk::UserPermissson> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::insider::sdk::UserPermissson>() {
  return ::insider::sdk::UserPermissson_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_in_5fsdk_5fbody_5fuser_2eproto
