// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_sdk_body_user.proto

#include "in_sdk_body_user.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fbody_5fuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserAllInfo_in_5fsdk_5fbody_5fuser_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fbody_5fuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserBaseInfo_in_5fsdk_5fbody_5fuser_2eproto;
namespace insider {
namespace sdk {
class UserBaseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserBaseInfo> _instance;
} _UserBaseInfo_default_instance_;
class UserAllInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserAllInfo> _instance;
} _UserAllInfo_default_instance_;
class UserListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserList> _instance;
} _UserList_default_instance_;
class UserSessionMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserSessionMsg> _instance;
} _UserSessionMsg_default_instance_;
}  // namespace sdk
}  // namespace insider
static void InitDefaultsscc_info_UserAllInfo_in_5fsdk_5fbody_5fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::insider::sdk::_UserAllInfo_default_instance_;
    new (ptr) ::insider::sdk::UserAllInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::insider::sdk::UserAllInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserAllInfo_in_5fsdk_5fbody_5fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserAllInfo_in_5fsdk_5fbody_5fuser_2eproto}, {
      &scc_info_UserBaseInfo_in_5fsdk_5fbody_5fuser_2eproto.base,}};

static void InitDefaultsscc_info_UserBaseInfo_in_5fsdk_5fbody_5fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::insider::sdk::_UserBaseInfo_default_instance_;
    new (ptr) ::insider::sdk::UserBaseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::insider::sdk::UserBaseInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserBaseInfo_in_5fsdk_5fbody_5fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserBaseInfo_in_5fsdk_5fbody_5fuser_2eproto}, {}};

static void InitDefaultsscc_info_UserList_in_5fsdk_5fbody_5fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::insider::sdk::_UserList_default_instance_;
    new (ptr) ::insider::sdk::UserList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::insider::sdk::UserList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserList_in_5fsdk_5fbody_5fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserList_in_5fsdk_5fbody_5fuser_2eproto}, {
      &scc_info_UserAllInfo_in_5fsdk_5fbody_5fuser_2eproto.base,}};

static void InitDefaultsscc_info_UserSessionMsg_in_5fsdk_5fbody_5fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::insider::sdk::_UserSessionMsg_default_instance_;
    new (ptr) ::insider::sdk::UserSessionMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::insider::sdk::UserSessionMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSessionMsg_in_5fsdk_5fbody_5fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserSessionMsg_in_5fsdk_5fbody_5fuser_2eproto}, {
      &scc_info_UserBaseInfo_in_5fsdk_5fbody_5fuser_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_in_5fsdk_5fbody_5fuser_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_in_5fsdk_5fbody_5fuser_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_in_5fsdk_5fbody_5fuser_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_in_5fsdk_5fbody_5fuser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserBaseInfo, user_name_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserBaseInfo, user_pass_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserBaseInfo, permission_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserBaseInfo, email_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserBaseInfo, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserAllInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserAllInfo, user_base_info_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserAllInfo, in_blacklist_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserAllInfo, valid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserList, user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserSessionMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserSessionMsg, user_type_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserSessionMsg, user_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserSessionMsg, token_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::UserSessionMsg, alive_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::insider::sdk::UserBaseInfo)},
  { 10, -1, sizeof(::insider::sdk::UserAllInfo)},
  { 18, -1, sizeof(::insider::sdk::UserList)},
  { 24, -1, sizeof(::insider::sdk::UserSessionMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::insider::sdk::_UserBaseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::insider::sdk::_UserAllInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::insider::sdk::_UserList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::insider::sdk::_UserSessionMsg_default_instance_),
};

const char descriptor_table_protodef_in_5fsdk_5fbody_5fuser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026in_sdk_body_user.proto\022\013insider.sdk\"\203\001"
  "\n\014UserBaseInfo\022\021\n\tuser_name\030\001 \001(\t\022\021\n\tuse"
  "r_pass\030\002 \001(\t\022/\n\npermission\030\003 \001(\0162\033.insid"
  "er.sdk.UserPermissson\022\r\n\005email\030\004 \001(\t\022\r\n\005"
  "phone\030\005 \001(\t\"e\n\013UserAllInfo\0221\n\016user_base_"
  "info\030\001 \001(\0132\031.insider.sdk.UserBaseInfo\022\024\n"
  "\014in_blacklist\030\002 \001(\010\022\r\n\005valid\030\003 \001(\010\"7\n\010Us"
  "erList\022+\n\tuser_info\030\001 \003(\0132\030.insider.sdk."
  "UserAllInfo\"\334\001\n\016UserSessionMsg\0229\n\tuser_t"
  "ype\030\001 \001(\0162&.insider.sdk.UserSessionMsg.U"
  "serMethod\022\'\n\004user\030\002 \001(\0132\031.insider.sdk.Us"
  "erBaseInfo\022\r\n\005token\030\003 \001(\t\022\022\n\nalive_time\030"
  "\004 \001(\004\"C\n\nUserMethod\022\013\n\007U_LOGIN\020\000\022\014\n\010U_LO"
  "GOUT\020\001\022\n\n\006U_VERI\020\002\022\016\n\nU_REGISTER\020\003*v\n\016Us"
  "erPermissson\022\030\n\024U_PERMISSION_INVALID\020\000\022\026"
  "\n\022U_PERMISSION_ADMIN\020\001\022\031\n\025U_PERMISSION_A"
  "DVANCED\020\002\022\027\n\023U_PERMOSSION_NORMAL\020\003b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_in_5fsdk_5fbody_5fuser_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_in_5fsdk_5fbody_5fuser_2eproto_sccs[4] = {
  &scc_info_UserAllInfo_in_5fsdk_5fbody_5fuser_2eproto.base,
  &scc_info_UserBaseInfo_in_5fsdk_5fbody_5fuser_2eproto.base,
  &scc_info_UserList_in_5fsdk_5fbody_5fuser_2eproto.base,
  &scc_info_UserSessionMsg_in_5fsdk_5fbody_5fuser_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_in_5fsdk_5fbody_5fuser_2eproto_once;
static bool descriptor_table_in_5fsdk_5fbody_5fuser_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_in_5fsdk_5fbody_5fuser_2eproto = {
  &descriptor_table_in_5fsdk_5fbody_5fuser_2eproto_initialized, descriptor_table_protodef_in_5fsdk_5fbody_5fuser_2eproto, "in_sdk_body_user.proto", 682,
  &descriptor_table_in_5fsdk_5fbody_5fuser_2eproto_once, descriptor_table_in_5fsdk_5fbody_5fuser_2eproto_sccs, descriptor_table_in_5fsdk_5fbody_5fuser_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_in_5fsdk_5fbody_5fuser_2eproto::offsets,
  file_level_metadata_in_5fsdk_5fbody_5fuser_2eproto, 4, file_level_enum_descriptors_in_5fsdk_5fbody_5fuser_2eproto, file_level_service_descriptors_in_5fsdk_5fbody_5fuser_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_in_5fsdk_5fbody_5fuser_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_in_5fsdk_5fbody_5fuser_2eproto), true);
namespace insider {
namespace sdk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserSessionMsg_UserMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_in_5fsdk_5fbody_5fuser_2eproto);
  return file_level_enum_descriptors_in_5fsdk_5fbody_5fuser_2eproto[0];
}
bool UserSessionMsg_UserMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserSessionMsg_UserMethod UserSessionMsg::U_LOGIN;
constexpr UserSessionMsg_UserMethod UserSessionMsg::U_LOGOUT;
constexpr UserSessionMsg_UserMethod UserSessionMsg::U_VERI;
constexpr UserSessionMsg_UserMethod UserSessionMsg::U_REGISTER;
constexpr UserSessionMsg_UserMethod UserSessionMsg::UserMethod_MIN;
constexpr UserSessionMsg_UserMethod UserSessionMsg::UserMethod_MAX;
constexpr int UserSessionMsg::UserMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserPermissson_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_in_5fsdk_5fbody_5fuser_2eproto);
  return file_level_enum_descriptors_in_5fsdk_5fbody_5fuser_2eproto[1];
}
bool UserPermissson_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void UserBaseInfo::InitAsDefaultInstance() {
}
class UserBaseInfo::_Internal {
 public:
};

UserBaseInfo::UserBaseInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:insider.sdk.UserBaseInfo)
}
UserBaseInfo::UserBaseInfo(const UserBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  user_pass_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_pass().empty()) {
    user_pass_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_pass_);
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  permission_ = from.permission_;
  // @@protoc_insertion_point(copy_constructor:insider.sdk.UserBaseInfo)
}

void UserBaseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserBaseInfo_in_5fsdk_5fbody_5fuser_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_pass_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  permission_ = 0;
}

UserBaseInfo::~UserBaseInfo() {
  // @@protoc_insertion_point(destructor:insider.sdk.UserBaseInfo)
  SharedDtor();
}

void UserBaseInfo::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_pass_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBaseInfo& UserBaseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserBaseInfo_in_5fsdk_5fbody_5fuser_2eproto.base);
  return *internal_default_instance();
}


void UserBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:insider.sdk.UserBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_pass_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  permission_ = 0;
  _internal_metadata_.Clear();
}

const char* UserBaseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_user_name(), ptr, ctx, "insider.sdk.UserBaseInfo.user_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_pass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_user_pass(), ptr, ctx, "insider.sdk.UserBaseInfo.user_pass");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .insider.sdk.UserPermissson permission = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_permission(static_cast<::insider::sdk::UserPermissson>(val));
        } else goto handle_unusual;
        continue;
      // string email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_email(), ptr, ctx, "insider.sdk.UserBaseInfo.email");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_phone(), ptr, ctx, "insider.sdk.UserBaseInfo.phone");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserBaseInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:insider.sdk.UserBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "insider.sdk.UserBaseInfo.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // string user_pass = 2;
  if (this->user_pass().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_pass().data(), static_cast<int>(this->_internal_user_pass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "insider.sdk.UserBaseInfo.user_pass");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_pass(), target);
  }

  // .insider.sdk.UserPermissson permission = 3;
  if (this->permission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_permission(), target);
  }

  // string email = 4;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "insider.sdk.UserBaseInfo.email");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_email(), target);
  }

  // string phone = 5;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "insider.sdk.UserBaseInfo.phone");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:insider.sdk.UserBaseInfo)
  return target;
}

size_t UserBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:insider.sdk.UserBaseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string user_pass = 2;
  if (this->user_pass().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_pass());
  }

  // string email = 4;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string phone = 5;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // .insider.sdk.UserPermissson permission = 3;
  if (this->permission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_permission());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBaseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:insider.sdk.UserBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBaseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserBaseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:insider.sdk.UserBaseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:insider.sdk.UserBaseInfo)
    MergeFrom(*source);
  }
}

void UserBaseInfo::MergeFrom(const UserBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:insider.sdk.UserBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.user_pass().size() > 0) {

    user_pass_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_pass_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.permission() != 0) {
    _internal_set_permission(from._internal_permission());
  }
}

void UserBaseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:insider.sdk.UserBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBaseInfo::CopyFrom(const UserBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:insider.sdk.UserBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseInfo::IsInitialized() const {
  return true;
}

void UserBaseInfo::InternalSwap(UserBaseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_pass_.Swap(&other->user_pass_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(permission_, other->permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserBaseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserAllInfo::InitAsDefaultInstance() {
  ::insider::sdk::_UserAllInfo_default_instance_._instance.get_mutable()->user_base_info_ = const_cast< ::insider::sdk::UserBaseInfo*>(
      ::insider::sdk::UserBaseInfo::internal_default_instance());
}
class UserAllInfo::_Internal {
 public:
  static const ::insider::sdk::UserBaseInfo& user_base_info(const UserAllInfo* msg);
};

const ::insider::sdk::UserBaseInfo&
UserAllInfo::_Internal::user_base_info(const UserAllInfo* msg) {
  return *msg->user_base_info_;
}
UserAllInfo::UserAllInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:insider.sdk.UserAllInfo)
}
UserAllInfo::UserAllInfo(const UserAllInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_base_info()) {
    user_base_info_ = new ::insider::sdk::UserBaseInfo(*from.user_base_info_);
  } else {
    user_base_info_ = nullptr;
  }
  ::memcpy(&in_blacklist_, &from.in_blacklist_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&in_blacklist_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:insider.sdk.UserAllInfo)
}

void UserAllInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserAllInfo_in_5fsdk_5fbody_5fuser_2eproto.base);
  ::memset(&user_base_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&user_base_info_)) + sizeof(valid_));
}

UserAllInfo::~UserAllInfo() {
  // @@protoc_insertion_point(destructor:insider.sdk.UserAllInfo)
  SharedDtor();
}

void UserAllInfo::SharedDtor() {
  if (this != internal_default_instance()) delete user_base_info_;
}

void UserAllInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserAllInfo& UserAllInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserAllInfo_in_5fsdk_5fbody_5fuser_2eproto.base);
  return *internal_default_instance();
}


void UserAllInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:insider.sdk.UserAllInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_base_info_ != nullptr) {
    delete user_base_info_;
  }
  user_base_info_ = nullptr;
  ::memset(&in_blacklist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&in_blacklist_)) + sizeof(valid_));
  _internal_metadata_.Clear();
}

const char* UserAllInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .insider.sdk.UserBaseInfo user_base_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_base_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool in_blacklist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          in_blacklist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserAllInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:insider.sdk.UserAllInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .insider.sdk.UserBaseInfo user_base_info = 1;
  if (this->has_user_base_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::user_base_info(this), target, stream);
  }

  // bool in_blacklist = 2;
  if (this->in_blacklist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_in_blacklist(), target);
  }

  // bool valid = 3;
  if (this->valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:insider.sdk.UserAllInfo)
  return target;
}

size_t UserAllInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:insider.sdk.UserAllInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .insider.sdk.UserBaseInfo user_base_info = 1;
  if (this->has_user_base_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_base_info_);
  }

  // bool in_blacklist = 2;
  if (this->in_blacklist() != 0) {
    total_size += 1 + 1;
  }

  // bool valid = 3;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAllInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:insider.sdk.UserAllInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAllInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserAllInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:insider.sdk.UserAllInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:insider.sdk.UserAllInfo)
    MergeFrom(*source);
  }
}

void UserAllInfo::MergeFrom(const UserAllInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:insider.sdk.UserAllInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_base_info()) {
    _internal_mutable_user_base_info()->::insider::sdk::UserBaseInfo::MergeFrom(from._internal_user_base_info());
  }
  if (from.in_blacklist() != 0) {
    _internal_set_in_blacklist(from._internal_in_blacklist());
  }
  if (from.valid() != 0) {
    _internal_set_valid(from._internal_valid());
  }
}

void UserAllInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:insider.sdk.UserAllInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAllInfo::CopyFrom(const UserAllInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:insider.sdk.UserAllInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAllInfo::IsInitialized() const {
  return true;
}

void UserAllInfo::InternalSwap(UserAllInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_base_info_, other->user_base_info_);
  swap(in_blacklist_, other->in_blacklist_);
  swap(valid_, other->valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAllInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserList::InitAsDefaultInstance() {
}
class UserList::_Internal {
 public:
};

UserList::UserList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:insider.sdk.UserList)
}
UserList::UserList(const UserList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_info_(from.user_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:insider.sdk.UserList)
}

void UserList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserList_in_5fsdk_5fbody_5fuser_2eproto.base);
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:insider.sdk.UserList)
  SharedDtor();
}

void UserList::SharedDtor() {
}

void UserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserList& UserList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserList_in_5fsdk_5fbody_5fuser_2eproto.base);
  return *internal_default_instance();
}


void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:insider.sdk.UserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_info_.Clear();
  _internal_metadata_.Clear();
}

const char* UserList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .insider.sdk.UserAllInfo user_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:insider.sdk.UserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .insider.sdk.UserAllInfo user_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_user_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:insider.sdk.UserList)
  return target;
}

size_t UserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:insider.sdk.UserList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .insider.sdk.UserAllInfo user_info = 1;
  total_size += 1UL * this->_internal_user_info_size();
  for (const auto& msg : this->user_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:insider.sdk.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  const UserList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:insider.sdk.UserList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:insider.sdk.UserList)
    MergeFrom(*source);
  }
}

void UserList::MergeFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:insider.sdk.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_info_.MergeFrom(from.user_info_);
}

void UserList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:insider.sdk.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:insider.sdk.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {
  return true;
}

void UserList::InternalSwap(UserList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_info_.InternalSwap(&other->user_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserSessionMsg::InitAsDefaultInstance() {
  ::insider::sdk::_UserSessionMsg_default_instance_._instance.get_mutable()->user_ = const_cast< ::insider::sdk::UserBaseInfo*>(
      ::insider::sdk::UserBaseInfo::internal_default_instance());
}
class UserSessionMsg::_Internal {
 public:
  static const ::insider::sdk::UserBaseInfo& user(const UserSessionMsg* msg);
};

const ::insider::sdk::UserBaseInfo&
UserSessionMsg::_Internal::user(const UserSessionMsg* msg) {
  return *msg->user_;
}
UserSessionMsg::UserSessionMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:insider.sdk.UserSessionMsg)
}
UserSessionMsg::UserSessionMsg(const UserSessionMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from._internal_has_user()) {
    user_ = new ::insider::sdk::UserBaseInfo(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&alive_time_, &from.alive_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_type_) -
    reinterpret_cast<char*>(&alive_time_)) + sizeof(user_type_));
  // @@protoc_insertion_point(copy_constructor:insider.sdk.UserSessionMsg)
}

void UserSessionMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserSessionMsg_in_5fsdk_5fbody_5fuser_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_type_) -
      reinterpret_cast<char*>(&user_)) + sizeof(user_type_));
}

UserSessionMsg::~UserSessionMsg() {
  // @@protoc_insertion_point(destructor:insider.sdk.UserSessionMsg)
  SharedDtor();
}

void UserSessionMsg::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void UserSessionMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserSessionMsg& UserSessionMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserSessionMsg_in_5fsdk_5fbody_5fuser_2eproto.base);
  return *internal_default_instance();
}


void UserSessionMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:insider.sdk.UserSessionMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&alive_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_type_) -
      reinterpret_cast<char*>(&alive_time_)) + sizeof(user_type_));
  _internal_metadata_.Clear();
}

const char* UserSessionMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .insider.sdk.UserSessionMsg.UserMethod user_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_user_type(static_cast<::insider::sdk::UserSessionMsg_UserMethod>(val));
        } else goto handle_unusual;
        continue;
      // .insider.sdk.UserBaseInfo user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_token(), ptr, ctx, "insider.sdk.UserSessionMsg.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 alive_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          alive_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSessionMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:insider.sdk.UserSessionMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .insider.sdk.UserSessionMsg.UserMethod user_type = 1;
  if (this->user_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_user_type(), target);
  }

  // .insider.sdk.UserBaseInfo user = 2;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::user(this), target, stream);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "insider.sdk.UserSessionMsg.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  // uint64 alive_time = 4;
  if (this->alive_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_alive_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:insider.sdk.UserSessionMsg)
  return target;
}

size_t UserSessionMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:insider.sdk.UserSessionMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .insider.sdk.UserBaseInfo user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // uint64 alive_time = 4;
  if (this->alive_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_alive_time());
  }

  // .insider.sdk.UserSessionMsg.UserMethod user_type = 1;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_user_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSessionMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:insider.sdk.UserSessionMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSessionMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserSessionMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:insider.sdk.UserSessionMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:insider.sdk.UserSessionMsg)
    MergeFrom(*source);
  }
}

void UserSessionMsg::MergeFrom(const UserSessionMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:insider.sdk.UserSessionMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::insider::sdk::UserBaseInfo::MergeFrom(from._internal_user());
  }
  if (from.alive_time() != 0) {
    _internal_set_alive_time(from._internal_alive_time());
  }
  if (from.user_type() != 0) {
    _internal_set_user_type(from._internal_user_type());
  }
}

void UserSessionMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:insider.sdk.UserSessionMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSessionMsg::CopyFrom(const UserSessionMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:insider.sdk.UserSessionMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSessionMsg::IsInitialized() const {
  return true;
}

void UserSessionMsg::InternalSwap(UserSessionMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(alive_time_, other->alive_time_);
  swap(user_type_, other->user_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSessionMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sdk
}  // namespace insider
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::insider::sdk::UserBaseInfo* Arena::CreateMaybeMessage< ::insider::sdk::UserBaseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::insider::sdk::UserBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::insider::sdk::UserAllInfo* Arena::CreateMaybeMessage< ::insider::sdk::UserAllInfo >(Arena* arena) {
  return Arena::CreateInternal< ::insider::sdk::UserAllInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::insider::sdk::UserList* Arena::CreateMaybeMessage< ::insider::sdk::UserList >(Arena* arena) {
  return Arena::CreateInternal< ::insider::sdk::UserList >(arena);
}
template<> PROTOBUF_NOINLINE ::insider::sdk::UserSessionMsg* Arena::CreateMaybeMessage< ::insider::sdk::UserSessionMsg >(Arena* arena) {
  return Arena::CreateInternal< ::insider::sdk::UserSessionMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
