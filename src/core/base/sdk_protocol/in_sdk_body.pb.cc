// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_sdk_body.proto

#include "in_sdk_body.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fbody_5fappmodule_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppModuleCoutInfoList_in_5fsdk_5fbody_5fappmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fbody_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Content_in_5fsdk_5fbody_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fbody_5fuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserList_in_5fsdk_5fbody_5fuser_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fbody_5fuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSessionMsg_in_5fsdk_5fbody_5fuser_2eproto;
namespace insider {
namespace sdk {
class ContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Content> _instance;
  const ::insider::sdk::AppModuleCoutInfoList* app_module_list_;
  const ::insider::sdk::UserList* user_list_;
} _Content_default_instance_;
class BodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Body> _instance;
} _Body_default_instance_;
}  // namespace sdk
}  // namespace insider
static void InitDefaultsscc_info_Body_in_5fsdk_5fbody_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::insider::sdk::_Body_default_instance_;
    new (ptr) ::insider::sdk::Body();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::insider::sdk::Body::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Body_in_5fsdk_5fbody_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Body_in_5fsdk_5fbody_2eproto}, {
      &scc_info_UserSessionMsg_in_5fsdk_5fbody_5fuser_2eproto.base,
      &scc_info_Content_in_5fsdk_5fbody_2eproto.base,}};

static void InitDefaultsscc_info_Content_in_5fsdk_5fbody_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::insider::sdk::_Content_default_instance_;
    new (ptr) ::insider::sdk::Content();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::insider::sdk::Content::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Content_in_5fsdk_5fbody_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Content_in_5fsdk_5fbody_2eproto}, {
      &scc_info_AppModuleCoutInfoList_in_5fsdk_5fbody_5fappmodule_2eproto.base,
      &scc_info_UserList_in_5fsdk_5fbody_5fuser_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_in_5fsdk_5fbody_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_in_5fsdk_5fbody_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_in_5fsdk_5fbody_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_in_5fsdk_5fbody_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Content, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Content, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Content, magic_),
  offsetof(::insider::sdk::ContentDefaultTypeInternal, app_module_list_),
  offsetof(::insider::sdk::ContentDefaultTypeInternal, user_list_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Content, ContentOneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Body, user_session_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Body, url_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Body, method_),
  PROTOBUF_FIELD_OFFSET(::insider::sdk::Body, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::insider::sdk::Content)},
  { 9, -1, sizeof(::insider::sdk::Body)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::insider::sdk::_Content_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::insider::sdk::_Body_default_instance_),
};

const char descriptor_table_protodef_in_5fsdk_5fbody_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021in_sdk_body.proto\022\013insider.sdk\032\026in_sdk"
  "_body_user.proto\032\033in_sdk_body_appmodule."
  "proto\"\223\001\n\007Content\022\r\n\005magic\030\001 \001(\003\022=\n\017app_"
  "module_list\030\002 \001(\0132\".insider.sdk.AppModul"
  "eCoutInfoListH\000\022*\n\tuser_list\030\003 \001(\0132\025.ins"
  "ider.sdk.UserListH\000B\016\n\014ContentOneof\"\231\001\n\004"
  "Body\0221\n\014user_session\030\001 \001(\0132\033.insider.sdk"
  ".UserSessionMsg\022\013\n\003url\030\002 \001(\t\022*\n\006method\030\003"
  " \001(\0162\032.insider.sdk.OperationType\022%\n\007cont"
  "ent\030\005 \001(\0132\024.insider.sdk.Content*D\n\rOpera"
  "tionType\022\013\n\007INVALID\020\000\022\007\n\003GET\020\001\022\010\n\004POST\020\002"
  "\022\007\n\003PUT\020\004\022\n\n\006DELETE\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_in_5fsdk_5fbody_2eproto_deps[2] = {
  &::descriptor_table_in_5fsdk_5fbody_5fappmodule_2eproto,
  &::descriptor_table_in_5fsdk_5fbody_5fuser_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_in_5fsdk_5fbody_2eproto_sccs[2] = {
  &scc_info_Body_in_5fsdk_5fbody_2eproto.base,
  &scc_info_Content_in_5fsdk_5fbody_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_in_5fsdk_5fbody_2eproto_once;
static bool descriptor_table_in_5fsdk_5fbody_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_in_5fsdk_5fbody_2eproto = {
  &descriptor_table_in_5fsdk_5fbody_2eproto_initialized, descriptor_table_protodef_in_5fsdk_5fbody_2eproto, "in_sdk_body.proto", 469,
  &descriptor_table_in_5fsdk_5fbody_2eproto_once, descriptor_table_in_5fsdk_5fbody_2eproto_sccs, descriptor_table_in_5fsdk_5fbody_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_in_5fsdk_5fbody_2eproto::offsets,
  file_level_metadata_in_5fsdk_5fbody_2eproto, 2, file_level_enum_descriptors_in_5fsdk_5fbody_2eproto, file_level_service_descriptors_in_5fsdk_5fbody_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_in_5fsdk_5fbody_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_in_5fsdk_5fbody_2eproto), true);
namespace insider {
namespace sdk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_in_5fsdk_5fbody_2eproto);
  return file_level_enum_descriptors_in_5fsdk_5fbody_2eproto[0];
}
bool OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Content::InitAsDefaultInstance() {
  ::insider::sdk::_Content_default_instance_.app_module_list_ = const_cast< ::insider::sdk::AppModuleCoutInfoList*>(
      ::insider::sdk::AppModuleCoutInfoList::internal_default_instance());
  ::insider::sdk::_Content_default_instance_.user_list_ = const_cast< ::insider::sdk::UserList*>(
      ::insider::sdk::UserList::internal_default_instance());
}
class Content::_Internal {
 public:
  static const ::insider::sdk::AppModuleCoutInfoList& app_module_list(const Content* msg);
  static const ::insider::sdk::UserList& user_list(const Content* msg);
};

const ::insider::sdk::AppModuleCoutInfoList&
Content::_Internal::app_module_list(const Content* msg) {
  return *msg->ContentOneof_.app_module_list_;
}
const ::insider::sdk::UserList&
Content::_Internal::user_list(const Content* msg) {
  return *msg->ContentOneof_.user_list_;
}
void Content::set_allocated_app_module_list(::insider::sdk::AppModuleCoutInfoList* app_module_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ContentOneof();
  if (app_module_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_module_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_module_list, submessage_arena);
    }
    set_has_app_module_list();
    ContentOneof_.app_module_list_ = app_module_list;
  }
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.Content.app_module_list)
}
void Content::clear_app_module_list() {
  if (_internal_has_app_module_list()) {
    delete ContentOneof_.app_module_list_;
    clear_has_ContentOneof();
  }
}
void Content::set_allocated_user_list(::insider::sdk::UserList* user_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ContentOneof();
  if (user_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_list, submessage_arena);
    }
    set_has_user_list();
    ContentOneof_.user_list_ = user_list;
  }
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.Content.user_list)
}
void Content::clear_user_list() {
  if (_internal_has_user_list()) {
    delete ContentOneof_.user_list_;
    clear_has_ContentOneof();
  }
}
Content::Content()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:insider.sdk.Content)
}
Content::Content(const Content& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  magic_ = from.magic_;
  clear_has_ContentOneof();
  switch (from.ContentOneof_case()) {
    case kAppModuleList: {
      _internal_mutable_app_module_list()->::insider::sdk::AppModuleCoutInfoList::MergeFrom(from._internal_app_module_list());
      break;
    }
    case kUserList: {
      _internal_mutable_user_list()->::insider::sdk::UserList::MergeFrom(from._internal_user_list());
      break;
    }
    case CONTENTONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:insider.sdk.Content)
}

void Content::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Content_in_5fsdk_5fbody_2eproto.base);
  magic_ = PROTOBUF_LONGLONG(0);
  clear_has_ContentOneof();
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:insider.sdk.Content)
  SharedDtor();
}

void Content::SharedDtor() {
  if (has_ContentOneof()) {
    clear_ContentOneof();
  }
}

void Content::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Content& Content::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Content_in_5fsdk_5fbody_2eproto.base);
  return *internal_default_instance();
}


void Content::clear_ContentOneof() {
// @@protoc_insertion_point(one_of_clear_start:insider.sdk.Content)
  switch (ContentOneof_case()) {
    case kAppModuleList: {
      delete ContentOneof_.app_module_list_;
      break;
    }
    case kUserList: {
      delete ContentOneof_.user_list_;
      break;
    }
    case CONTENTONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENTONEOF_NOT_SET;
}


void Content::Clear() {
// @@protoc_insertion_point(message_clear_start:insider.sdk.Content)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magic_ = PROTOBUF_LONGLONG(0);
  clear_ContentOneof();
  _internal_metadata_.Clear();
}

const char* Content::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .insider.sdk.AppModuleCoutInfoList app_module_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_module_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .insider.sdk.UserList user_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Content::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:insider.sdk.Content)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 magic = 1;
  if (this->magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_magic(), target);
  }

  // .insider.sdk.AppModuleCoutInfoList app_module_list = 2;
  if (_internal_has_app_module_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::app_module_list(this), target, stream);
  }

  // .insider.sdk.UserList user_list = 3;
  if (_internal_has_user_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::user_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:insider.sdk.Content)
  return target;
}

size_t Content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:insider.sdk.Content)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 magic = 1;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_magic());
  }

  switch (ContentOneof_case()) {
    // .insider.sdk.AppModuleCoutInfoList app_module_list = 2;
    case kAppModuleList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ContentOneof_.app_module_list_);
      break;
    }
    // .insider.sdk.UserList user_list = 3;
    case kUserList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ContentOneof_.user_list_);
      break;
    }
    case CONTENTONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Content::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:insider.sdk.Content)
  GOOGLE_DCHECK_NE(&from, this);
  const Content* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Content>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:insider.sdk.Content)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:insider.sdk.Content)
    MergeFrom(*source);
  }
}

void Content::MergeFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:insider.sdk.Content)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magic() != 0) {
    _internal_set_magic(from._internal_magic());
  }
  switch (from.ContentOneof_case()) {
    case kAppModuleList: {
      _internal_mutable_app_module_list()->::insider::sdk::AppModuleCoutInfoList::MergeFrom(from._internal_app_module_list());
      break;
    }
    case kUserList: {
      _internal_mutable_user_list()->::insider::sdk::UserList::MergeFrom(from._internal_user_list());
      break;
    }
    case CONTENTONEOF_NOT_SET: {
      break;
    }
  }
}

void Content::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:insider.sdk.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content::CopyFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:insider.sdk.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {
  return true;
}

void Content::InternalSwap(Content* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(magic_, other->magic_);
  swap(ContentOneof_, other->ContentOneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Content::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Body::InitAsDefaultInstance() {
  ::insider::sdk::_Body_default_instance_._instance.get_mutable()->user_session_ = const_cast< ::insider::sdk::UserSessionMsg*>(
      ::insider::sdk::UserSessionMsg::internal_default_instance());
  ::insider::sdk::_Body_default_instance_._instance.get_mutable()->content_ = const_cast< ::insider::sdk::Content*>(
      ::insider::sdk::Content::internal_default_instance());
}
class Body::_Internal {
 public:
  static const ::insider::sdk::UserSessionMsg& user_session(const Body* msg);
  static const ::insider::sdk::Content& content(const Body* msg);
};

const ::insider::sdk::UserSessionMsg&
Body::_Internal::user_session(const Body* msg) {
  return *msg->user_session_;
}
const ::insider::sdk::Content&
Body::_Internal::content(const Body* msg) {
  return *msg->content_;
}
void Body::clear_user_session() {
  if (GetArenaNoVirtual() == nullptr && user_session_ != nullptr) {
    delete user_session_;
  }
  user_session_ = nullptr;
}
Body::Body()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:insider.sdk.Body)
}
Body::Body(const Body& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from._internal_has_user_session()) {
    user_session_ = new ::insider::sdk::UserSessionMsg(*from.user_session_);
  } else {
    user_session_ = nullptr;
  }
  if (from._internal_has_content()) {
    content_ = new ::insider::sdk::Content(*from.content_);
  } else {
    content_ = nullptr;
  }
  method_ = from.method_;
  // @@protoc_insertion_point(copy_constructor:insider.sdk.Body)
}

void Body::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Body_in_5fsdk_5fbody_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&user_session_)) + sizeof(method_));
}

Body::~Body() {
  // @@protoc_insertion_point(destructor:insider.sdk.Body)
  SharedDtor();
}

void Body::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_session_;
  if (this != internal_default_instance()) delete content_;
}

void Body::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Body& Body::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Body_in_5fsdk_5fbody_2eproto.base);
  return *internal_default_instance();
}


void Body::Clear() {
// @@protoc_insertion_point(message_clear_start:insider.sdk.Body)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_session_ != nullptr) {
    delete user_session_;
  }
  user_session_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  method_ = 0;
  _internal_metadata_.Clear();
}

const char* Body::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .insider.sdk.UserSessionMsg user_session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_url(), ptr, ctx, "insider.sdk.Body.url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .insider.sdk.OperationType method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::insider::sdk::OperationType>(val));
        } else goto handle_unusual;
        continue;
      // .insider.sdk.Content content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Body::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:insider.sdk.Body)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .insider.sdk.UserSessionMsg user_session = 1;
  if (this->has_user_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::user_session(this), target, stream);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "insider.sdk.Body.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // .insider.sdk.OperationType method = 3;
  if (this->method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_method(), target);
  }

  // .insider.sdk.Content content = 5;
  if (this->has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::content(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:insider.sdk.Body)
  return target;
}

size_t Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:insider.sdk.Body)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .insider.sdk.UserSessionMsg user_session = 1;
  if (this->has_user_session()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_session_);
  }

  // .insider.sdk.Content content = 5;
  if (this->has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // .insider.sdk.OperationType method = 3;
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Body::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:insider.sdk.Body)
  GOOGLE_DCHECK_NE(&from, this);
  const Body* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Body>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:insider.sdk.Body)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:insider.sdk.Body)
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:insider.sdk.Body)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_user_session()) {
    _internal_mutable_user_session()->::insider::sdk::UserSessionMsg::MergeFrom(from._internal_user_session());
  }
  if (from.has_content()) {
    _internal_mutable_content()->::insider::sdk::Content::MergeFrom(from._internal_content());
  }
  if (from.method() != 0) {
    _internal_set_method(from._internal_method());
  }
}

void Body::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:insider.sdk.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:insider.sdk.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {
  return true;
}

void Body::InternalSwap(Body* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_session_, other->user_session_);
  swap(content_, other->content_);
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Body::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sdk
}  // namespace insider
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::insider::sdk::Content* Arena::CreateMaybeMessage< ::insider::sdk::Content >(Arena* arena) {
  return Arena::CreateInternal< ::insider::sdk::Content >(arena);
}
template<> PROTOBUF_NOINLINE ::insider::sdk::Body* Arena::CreateMaybeMessage< ::insider::sdk::Body >(Arena* arena) {
  return Arena::CreateInternal< ::insider::sdk::Body >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
