# version
RELEASE_VERSION = v1.0.0

# 调试模式使能
ndebug = false

# make path
export MAKE := "/usr/bin/make"

# make flag
MAKEFLAG := -s --no-print-directory

# compile marcro
CC := g++

# compile flags
INC := -I$(ROOT_DIR)/../include \
		-I$(ROOT_DIR) \
		-I$(ROOT_DIR)/config \
		-I$(ROOT_DIR)/core \
		-I$(ROOT_DIR)/macro \
		-I$(ROOT_DIR)/version \
		-I$(ROOT_DIR)/modules \
		-I$(ROOT_DIR)/tools \
		-I$(ROOT_DIR)/loguru

# github三方库使用静态链接
LIBS := -L$(ROOT_DIR)/../lib \
		-lutil_time \
		-lprotobuf \
		-lutil_pthread \
		-lSQLiteCpp \
		-lsqlite3 \
		-lfmt \
		-lhandy
LIBS += $(LIBS) -lrt -lpthread -ldl

DMARCROS := -DLANGUAGE_ZH -DSOFT_VERSION=\"$(RELEASE_VERSION)\" -DLOGURU_WITH_STREAMS=1

# 调试模式
ifeq ($(ndebug), true)
DMARCROS += -DNDEBUG
else
DMARCROS += -DDEBUG
endif

# -ggdb
CCFLAG := -O0 -g3 -Wall $(DMARCROS) $(INC) $(LIBS) -std=c++17
OBJCCFLAG := $(CCFLAG) -c

# recursive make and clean
.PHONY: build-subdirs
build-subdirs: $(DIRS)

.PHONY: $(DIRS)
$(DIRS):
	@$(MAKE) $(MAKEFLAG) -C $@ all
	
.PHONY: clean-subdirs
clean-subdirs:
	@for dir in $(DIRS); do \
		$(MAKE) $(MAKEFLAG) -C $$dir clean; \
	done

# dependencies
#@echo -e "\t" CC $(OBJCCFLAG) $< -o $@
%.o: %.c*
	@echo -e "\t" CC $<
	@$(CC) $< -o $@ $(OBJCCFLAG)
